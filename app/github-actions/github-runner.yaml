# apiVersion: actions.summerwind.dev/v1alpha1
# kind: RunnerDeployment
# metadata:
#   name: gitops-runner
#   namespace: github-actions
#   annotations:
#     argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
# spec:
#   replicas: 2
#   template: { spec: { repository: MP281X/argocd } }

# ---
# apiVersion: actions.summerwind.dev/v1alpha1
# kind: RunnerDeployment
# metadata:
#   name: dicantieri-runner
#   namespace: github-actions
#   annotations:
#     argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
# spec:
#   replicas: 2
#   template: { spec: { repository: MP281X/dicantieri } }

apiVersion: actions.summerwind.dev/v1alpha1
kind: RunnerSet
metadata:
  name: example
spec:
  replicas: 1
  repository: MP281X/dicantieri
  dockerdWithinRunnerContainer: true
  template:
    spec:
      serviceName: example
      securityContext:
        # All level/role/type/user values will vary based on your SELinux policies.
        # See https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html/container_security_guide/docker_selinux_security_policy for information about SELinux with containers
        seLinuxOptions:
          level: "s0"
          role: "system_r"
          type: "super_t"
          user: "system_u"
      containers:
        - name: runner
          env: []
          resources:
            limits:
              cpu: "4.0"
              memory: "8Gi"
            requests:
              cpu: "2.0"
              memory: "4Gi"
          # This is an advanced configuration. Don't touch it unless you know what you're doing.
          securityContext:
            # Usually, the runner container's privileged field is derived from dockerdWithinRunnerContainer.
            # But in the case where you need to run privileged job steps even if you don't use docker/don't need dockerd within the runner container,
            # just specified `privileged: true` like this.
            # See https://github.com/actions/actions-runner-controller/issues/1282
            # Do note that specifying `privileged: false` while using dind is very likely to fail, even if you use some vm-based container runtimes
            # like firecracker and kata. Basically they run containers within dedicated micro vms and so
            # it's more like you can use `privileged: true` safer with those runtimes.
            #
            # privileged: true
        - name: docker
          resources:
            limits:
              cpu: "4.0"
              memory: "8Gi"
            requests:
              cpu: "2.0"
              memory: "4Gi"
