apiVersion: v1
kind: Namespace
metadata: { name: auth-server }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-server
  namespace: auth-server
  labels: { app: auth-server }
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector: { matchLabels: { app: auth-server } }
  template:
    metadata: { labels: { app: auth-server } }
    spec:
      containers:
        - name: auth-server
          image: ghcr.io/mp281x/auth-server:latest
          ports: [containerPort: 3000]
          env:
            - name: client_secret
              valueFrom:
                secretKeyRef:
                  name: auth-secrets
                  key: client_secret
            - name: client_id
              valueFrom:
                secretKeyRef:
                  name: auth-secrets
                  key: client_id
            - name: jwtKey
              valueFrom:
                secretKeyRef:
                  name: auth-secrets
                  key: jwtKey

---
apiVersion: v1
kind: Service
metadata:
  name: auth-server
  namespace: auth-server
spec:
  selector: { app: auth-server }
  ports: [{ port: 3000, name: auth-server, targetPort: 3000 }]

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: auth-server
  namespace: auth-server
  annotations: { kubernetes.io/ingress.class: traefik }
spec:
  entryPoints: [websecure]
  tls: { secretName: auth-cert }
  routes:
    - match: Host(`auth.dev.mp281x.xyz`)
      kind: Rule
      services: [{ name: auth-server, port: 3000 }]

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: auth-cert
  namespace: auth-server
spec:
  secretName: auth-cert
  dnsNames: [auth.dev.mp281x.xyz]
  issuerRef:
    name: letsencrypt-staging
    kind: ClusterIssuer
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: auth-server
  namespace: auth-server
spec:
  forwardAuth:
    address: https://auth.dev.mp281x.xyz/
    tls: {}
